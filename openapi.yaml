openapi: 3.0.0
servers:
  - url: https://tq.cxalloy.com/api/v1
info:
  description: |
    The CxAlloy TQ API is hosted at [https://tq.cxalloy.com/api/v1](https://tq.cxalloy.com/api/v1) 
    
    This documentation describes CxAlloy's API standards, data model, and endpoints. We strive for documentation that is understandable, detailed, and comprehensive.

    # Introduction
    Welcome to the CxAlloy TQ API.  Our team is happy to answer any questions, address any frustrations, or consider any requests. You can communicate with us by emailing [support](mailto:support@cxalloy.com).  We'll do our best to accommodate you.
    
    # Security
    CxAlloy values the security of your data, and all API requests must be made over HTTPS.  
    This is a **REST** API that uses predictable, resource-oriented URLs and standard HTTP response codes.
    
    We strongly recommend you keep your API key secret as secure as possible:
    *  You should never transmit it over a network or the internet
    *  Don't store it in publicly accessible code or website (e.g. Javascript for a public website).
    *  Avoid checking it into source control. Use configuration files that can be loaded into your code.
    
    # Authentication
    ## API Keys
    This API uses an account level key that can be created by an account admin in the account settings in TQ.  Once the key is created it will display a one time dialogue box with your secret (private) key.  You must save this key somewhere safe as it will be used to generate a signature that you can use to make requests to the API.  
    
    ## HTTP Headers
    Every request to the API must pass 4 headers with each request. 
    
    |        Name          |                      Value                           |
    |:---------------------|:-----------------------------------------------------|
    | Content-Type         | application/json                                     |
    | cxalloy-identifier   | The identifier from the API key                      |
    | cxalloy-signature    | Signature generated from the secret for this request |
    | cxalloy-timestamp    | unix timestamp used when generating the signature    |
    
    ## How to generate the signature
    The signature is generated by concatenating the **JSON object** if request body is present with the unix timestamp.  If there is no request body like in a **GET** request just use the timestamp.  
    
    The timestamp has to be the same one that is being passed in the `cxalloy-timestamp` header.  Also the timestamp can not be older than 1 hour from the current time.  
    
    Then you use the [HMAC Method](https://en.wikipedia.org/wiki/HMAC) to generate the signature for the request. The hashing algorithm to use is **SHA256**.
    
    In PHP an example of this is code looks like this where `$string` would be the concatenated JSON object and the timestamp.
    
    ```php
    <?php
    // generate the signature
    $signature = hash_hmac('sha256', $string, 'TQ API SECRET');
    ```
    
    Here is a PHP example of a generic function that can make requests to the API.
      
      ```php
      <?php
      /**
       *  Function to make cURL request using CxAlloy authentication
       *
       * @param $url - The URL route to use.
       * @param string $timestamp - timestamp to use to generate signature.
       * @param string $type - GET, POST, PUT, DELETE. Defaults to GET.
       * @param array $arguments - Endpoint arguments. (optional)
       *
       * @return mixed
       */
      function send_request(
          $url = null,
          $timestamp,
          $identifier,
          $secret,
          $type = 'GET',
          $arguments = array()
        )
      {
        if (empty($timestamp))
          {
            return false;
          }
          
        $type = strtoupper($type);

        if ($type == 'GET')
        {
          $url .= "?" . http_build_query($arguments);
        }
  
        // concat json encoded arguments with the timestamp from cxalloy-timestamp header
        if( ! empty($arguments))
        {
          $string = json_encode($arguments) . $timestamp;
        }
        else
        {
          $string = $timestamp;
        }
  
        //generate the signature
        $signature = hash_hmac('sha256', $string, $secret);
        
        $curl = curl_init();

        curl_setopt_array($curl, array(
          CURLOPT_URL => $url,
          CURLOPT_RETURNTRANSFER => true,
          CURLOPT_ENCODING => "",
          CURLOPT_MAXREDIRS => 10,
          CURLOPT_TIMEOUT => 30,
          CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
          CURLOPT_CUSTOMREQUEST => $type,
          CURLOPT_HTTPHEADER => array(
            "cache-control: no-cache",
            "content-type: application/json",
            "cxalloy-identifier: $identifier",
            "cxalloy-signature: $signature",
            "cxalloy-timestamp: $timestamp"
          ),
        ));
  
        // add the request body if needed
        if ( ! empty($arguments) && $type !== 'GET')
        {
          curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($arguments));
        }
  
        $result = curl_exec($curl);
  
        curl_close($curl);
  
        $response = json_decode($result);
  
        return $response;
        
      }
      ```

    # Pagination
    The maximum number of records that any request can return is 500.  In order to get the next set of records you should pass `?page=2` in the query parameters if its a **GET** request or `page = 2` as a parameter in the request body of a **POST** request. 
    

    # Rate Limiting
    Maximum requests per hour for any api key is 1000.  If you hit this limit you will get an error back letting you know that you have exceeded the limit.  

    
    
  version: "1.0.0"
  title: CxAlloy TQ API
  contact:
    email: support@cxalloy.com
tags:
  - name: Projects
    description: Operations dealing with projects
  - name: Project Settings
    description: Operations dealing with project settings
  - name: Assets
    description: Operations dealing with assets
  - name: Tests
    description: Operations dealing with tests
  - name: Files
    description: Operations dealing with files
paths:

  /project:
    get:
      tags:
        - Projects
      summary: /project
      description: Returns all the projects for an account
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
          
  /project/{project_id}:
    get:
      tags:
        - Projects
      summary: /project/{project_id}
      description: Returns a specific project
      parameters:
        - in: path
          name: project_id
          description: Specific Project ID
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Project does not exist in your account
          
  /attribute/{asset_type}:
    get:
      tags:
        - Project Settings
      summary: Returns all attributes for an asset type
      parameters:
        - in: path
          name: asset_type
          description: Asset type that attribute is connected to
          schema:
            type: string
            enum:
              - building
              - equipment
              - floor
              - space
              - system
              - type
              - zone
          required: true
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
                - Asset type required
                - Invalid Asset Type
  
  /attribute/{asset_type}/{asset_id}:
    get:
      tags:
        - Project Settings
      summary: Returns a single attribute
      parameters:
        - in: path
          name: asset_type
          description: Asset type that attribute is connected to
          schema:
            type: string
            enum:
              - building
              - equipment
              - floor
              - space
              - system
              - type
              - zone
          required: true
        - in: path
          name: asset_id
          description: Specific asset ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attribute'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account 
                - Asset type required
                - Invalid Asset Type
          
  /discipline:
    get:
      tags:
        - Project Settings
      summary: Returns all the disciplines in a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Discipline'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
          
  /discipline/{discipline_id}:
    get:
      tags:
        - Project Settings
      summary: Returns a specific discipline
      parameters:
        - in: path
          name: discipline_id
          description: Specific discipline ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Discipline'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
                
  /testattemptstatus:
    get:
      tags:
        - Project Settings
      summary: Returns all the test attempt statuses in a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testattemptstatus'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
          
  /testattemptstatus/{testattemptstatus_id}:
    get:
      tags:
        - Project Settings
      summary: Returns a specific test attempt statuses
      parameters:
        - in: path
          name: testattemptstatus_id
          description: Specific test attempt status ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Testattemptstatus'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  /building:
    get:
      tags:
        - Assets
      summary: Returns all buildings on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /building/{building_id}:
    get:
      tags:
        - Assets
      summary: Returns a single building
      parameters:
        - in: path
          name: building_id
          description: Specific building ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
                
  /equipment:
    get:
      tags:
        - Assets
      summary: Returns all equipment on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - systems
                  - zones
                  - attributes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /equipment/{equipment_id}:
    get:
      tags:
        - Assets
      summary: Returns a single piece of equipment
      parameters:
        - in: path
          name: equipment_id
          description: Specific equipment ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - systems
                  - zones
                  - attributes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipment'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
                
  /equipmenttype:
    get:
      tags:
        - Assets
      summary: Returns all equipment types on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipmenttype'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /equipmenttype/{type_id}:
    get:
      tags:
        - Assets
      summary: Returns a single equipment type
      parameters:
        - in: path
          name: type_id
          description: Specific equipment type ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Equipmenttype'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account

  /floor:
    get:
      tags:
        - Assets
      summary: Returns all floors on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floor'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /floor/{floor_id}:
    get:
      tags:
        - Assets
      summary: Returns a single floor
      parameters:
        - in: path
          name: floor_id
          description: Specific floor ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Floor'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /space:
    get:
      tags:
        - Assets
      summary: Returns all spaces on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - zones
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /space/{space_id}:
    get:
      tags:
        - Assets
      summary: Returns a single space
      parameters:
        - in: path
          name: space_id
          description: Specific space ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - zones
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Space'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account              
  
  /system:
    get:
      tags:
        - Assets
      summary: Returns all systems on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /system/{system_id}:
    get:
      tags:
        - Assets
      summary: Returns a single system
      parameters:
        - in: path
          name: system_id
          description: Specific system ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account

  /test:
    post:
      tags:
        - Tests
      summary: Returns test records
      requestBody:
        $ref: '#/components/requestBodies/testRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/filterResponse'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /testattempt:
    get:
      tags:
        - Tests
      summary: Returns all the test attempts in a test
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - in: query
          name: test_id
          schema:
            type: integer
          required: true
          description: The test id 
        - $ref: '#/components/parameters/PageParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - lines
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testattempt'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
                - Test ID required
  
  /testattempt/{testattempt_id}:
    get:
      tags:
        - Tests
      summary: Returns a specific test attempt
      parameters:
        - in: path
          name: testattempt_id
          description: Specific test attempt ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - lines
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testattempt'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account             
          
  /testattemptline:
      get:
        tags:
          - Tests
        summary: Returns all the test attempt lines in a test attempt
        parameters:
          - $ref: '#/components/parameters/ProjectParam'
          - in: query
            name: testattempt_id
            schema:
              type: integer
            required: true
            description: The test attempt id 
          - $ref: '#/components/parameters/PageParam'
          - in: query
            name: include
            schema:
              type: string
            required: false
            description: |
                  This will include related data in the results. (comma seperated string) 
  
                  Possible includes are 
                    - headers (*Lines designated as headers are not included by default*)
                    - issues
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Testattemptline'
          '400':
            description: |
                  - Project ID required  
                  - Project does not exist in your account
                  - Test attempt ID required
  
  /testattemptline/{testattemptline_id}:
    get:
      tags:
        - Tests
      summary: Returns a specific test attempt line
      parameters:
        - in: path
          name: testattemptline_id
          description: Specific test attempt ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
        - in: query
          name: include
          schema:
            type: string
          required: false
          description: |
                This will include related data in the results. (comma seperated string) 

                Possible includes are 
                  - headers (*Lines designated as headers are not included by default*)
                  - issues
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Testattemptline'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account             
          
  
  /file:
    get:
      tags:
        - Files
      summary: Returns all files on a project
      parameters:
        - $ref: '#/components/parameters/ProjectParam'
        - $ref: '#/components/parameters/PageParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
  
  /file/{file_id}:
    get:
      tags:
        - Files
      summary: Returns a single file
      parameters:
        - in: path
          name: file_id
          description: Specific file ID
          schema:
            type: integer
          required: true
        - $ref: '#/components/parameters/ProjectParam'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '400':
          description: |
                - Project ID required  
                - Project does not exist in your account
          
externalDocs:
  description: General CxAlloy Documentation
  url: 'https://support.cxalloy.com'
components:

  parameters:
  
    ProjectParam:
      in: query
      name: project_id
      schema:
        type: integer
      required: true
      description: The project id
      
    PageParam:
      in: query
      name: page
      schema:
        type: integer
        default: 1
      required: false
      description: The page (offset) of records to return. Pages have a limit of 500 records.
      
  
  schemas:

    Project:
      type: object
      properties:
        project_id:
          type: integer
          example: 67
        account_id:
          type: integer
          example: 7
        name:
          type: string
          example: Woodland Infrastructure Upgrade
        status:
          type: string
          enum:
            - Active
            - Archived
          example: Active
        number:
          type: string
          example: 117-50
        client:
          type: string
          example: Composite International
        building_owner:
          type: string
          example: Sandia National Labs
        location:
          type: string
          example: Atlanta, Georgia
        size:
          type: string
          example: 125,000 Square Feet
        cost:
          type: string
          example: 14 Million
        phase:
          type: string
          enum:
            - Design
            - Construction
            - Operations
        timezone:
          type: string
          example: America/New_York

    Equipment:
      type: object
      properties:
        equipment_id:
          type: integer
          example: 7477
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: AHU-1
        status_id:
          type: integer
          example: 345
        status:
          type: string
          example: Not Installed
        description:
          type: string
        type_id:
          type: integer
          example: 67585
        type:
          type: string
          example: Air Handling Unit
        disipline_id:
          type: integer
          example: 46
        disipline:
          type: string
          example: Mechanical
        space_id:
          type: integer
          example: 56584
        space:
          type: string
          example: 1013-B
        floor_id:
          type: integer
          example: 24
        floor:
          type: string
          example: First
        building_id:
          type: integer
          example: 78
        building:
          type: string
          example: Main Building
        notes:
          type: string
          example: Research lab 

    Test:
      type: object
      properties:
        test_id:
          type: integer
          example: 4242
        project_id:
          type: integer
          example: 67
        number:
          type: integer
          example: 6
        name:
          type: string
          example: AHU-1
        status_id:
          type: integer
          example: 4
        status:
          type: string
          example: Passed
        attempt_count:
          type: integer
          example: 3
        asset_name:
          type: string
          example: AHU-1
        asset_type:
          type: string
          example: Equipment
        asset_key:
          type: string
          example: equipment-1456
          description: | 
                        *key is the asset type concatenated with the ID*
        assigned_name:
          type: string
          example: Composite International
        assigned_type:
          type: string
          example: Company
        assigned_key:
          type: string
          example: company-6541
          description: | 
                        *key is the assigned type concatenated with the ID*
        discipline_id:
          type: integer
          example: 2
        discipline:
          type: string
          example: Electrical
        note:
          type: string
          example: Functional test could not be performed.
        estimated_time:
          type: string
          example: 4 days.
        tools:
          type: string
          example: multimeter, torque wrench, sockets, hand tools.
    
    Testattempt:
      type: object
      properties:
        testattempt_id:
          type: integer
          example: 2346
        attempt_number:
          type: integer
          example: 3
        status_id:
          type: integer
          example: 5
        status:
          type: string
          example: Failed
        status_change_person:
          type: string
          example: Tony Gutierrez
        status_change_date:
          type: string
          example: "2013-04-12"
          
    Testattemptline:
      type: object
      properties:
        testattemptline_id:
          type: integer
          example: 339
        line_number:
          type: integer
          example: 12
        description:
          type: string
          example: Record the manufacturer of the unit.
        answer:
          type: string
          enum:
            - Yes
            - No
            - NA
        note:
          type: string
          example: Functional test could not be performed.
        attribute:
          type: string
          example: CHURN PRESSURE
        attribute_value:
          type: string
          example: 23
        attribute_unit:
          type: string
          example: kPa
          
    Discipline:
      type: object
      properties:
        discipline_id:
          type: integer
          example: 424
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: Mechanical
          
    Building:
      type: object
      properties:
        building_id:
          type: integer
          example: 83
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: Main Building
        description:
          type: string
          example: Retail and Office Areas
          
    Floor:
      type: object
      properties:
        floor_id:
          type: integer
          example: 568
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: Third Floor
        description:
          type: string
          example: Upper Level Retail    
        building_id:
          type: integer
          example: 83
        building:
          type: string
          example: Main Building
          
    System:
      type: object
      properties:
        system_id:
          type: integer
          example: 749
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: HVAC
        description:
          type: string
          example: Heating, Ventilation and Air Conditioning    
        building_id:
          type: integer
          example: 83
        building:
          type: string
          example: Main Building
        discipline_id:
          type: integer
          example: 424
        discipline:
          type: string
          example: Mechanical
          
    Space:
      type: object
      properties:
        space_id:
          type: integer
          example: 3789
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: 03320 Retail Pump Room
        description:
          type: string
          example: Houses retail condenser water pumps.    
        building_id:
          type: integer
          example: 83
        building:
          type: string
          example: Main Building
        floor_id:
          type: integer
          example: 738
        floor:
          type: string
          example: Third Floor
    
    Attribute:
      type: object
      properties:
        name:
          type: string
          example: Air Flow Minimum
        value:
          type: string
          example: 23  
        unit:
          type: string
          example: L/s  
        verified:
          type: boolean
          example: 1
        verified_comment:
          type: string
          example: Setpoint is shown on page 27 of the balance report.
        source_name:
          type: string
          example: ACB-F3620
        source_type:
          type: string
          enum:
              - building
              - equipment
              - floor
              - space
              - system
              - type
              - zone
          example: equipment  
        source_id:
          type: integer
          example: 64732
        project_id:
          type: integer
          example: 67
    
    File:
      type: object
      properties:
        file_id:
          type: integer
          example: 749
        name:
          type: string
          example: AHU Drawing.jpg
        size:
          type: string
          example: 48.49 K  
        is_image:
          type: boolean
          example: 1
        uploaded_by:
          type: string
          example: Patrick Hunnicutt
        uploaded_date:
          type: string
          example: 10/04/2017
        url:
          type: string
          example: https://cxalloytq.imgix.net/116385.jpg
        source_name:
          type: string
          example: AHU-A3-02F
        source_type:
          type: string
          enum:
            - project
            - equipment
            - issue
            - test
            - testattemptline
            - checklist
            - checklistsection
            - checklistsectionline
            - type
            - system
            - building
            - floor
            - zone
            - space
            - review
            - fieldobservation
            - meeting
          example: equipment  
        source_id:
          type: integer
          example: 167537
          
    Testattemptstatus:
      type: object
      properties:
        testattemptstatus_id:
          type: integer
          example: 239
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: Passed
        color:
          type: string
          example: green
    
    Equipmenttype:
      type: object
      properties:
        equipmenttype_id:
          type: integer
          example: 424
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: Exhaust Fan
        description:
          type: string
          example: Inline and Roof Mounted Fans
        discipline_id:
          type: integer
          example: 424
        discipline:
          type: string
          example: Mechanical

    Zone:
      type: object
      properties:
        zone_id:
          type: integer
          example: 539
        project_id:
          type: integer
          example: 67
        name:
          type: string
          example: West Wing
        description:
          type: string
          example: Electrical area A2
        building_id:
          type: integer
          example: 83
        building:
          type: string
          example: Main Building
    
    testRequest:
      type: object
      description: This is the request object to get test records
      properties:
        project_id:
          type: integer
          example: 234
        page:
          type: integer
          description: The page (offset) of records to return. Pages are limited to 500 records.
          example: 3
          default: 1
        filter:
          type: object
          description: This will filter the results
          properties:
            id:
              type: array
              items:
                type: integer
                description: Filter records by test ID's
              example: [1, 2, 3]
            search:
              type: array
              items:
                type: string
                description: Filter records by search string
              example: [AHU]
            status:
              type: array
              items:
                type: integer
                description: Filter records by status ID's
              example: [1, 2, 3]
            discipline:
              type: array
              items:
                type: integer
                description: Filter records by discipline ID's
              example: [1, 2, 3]
        include:
          type: array
          description: This will include related data in the results
          items:
            type: string
            description: |
              Possible Values Are:
               * `attempts` - Include test attempts in the results
               * `lines` - Include test attempt lines in the results
            example: attempts, lines
      required:
        - project_id
        
    filterResponse: 
      type: object
      description: This the wrapper that we return records in.  It includes the total records returned, current page and a description of the records. This wrapper is only for requests that can be filtered.
      properties:
        records:
          type: array
          description: Records returned from the query
          items:
            oneOf:
              - $ref: '#/components/schemas/Test'
        total_count:
          type: integer
          example: 20
        page:
          type: integer
          example: 1
        description:
          type: string
          description: |
                        *This will return the filter sentence describing the records that were returned*
    
  
  requestBodies:
    
    testRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/testRequest'
      description: Request body 
      required: true